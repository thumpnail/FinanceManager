<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coinbase</name>
    </assembly>
    <members>
        <member name="M:Coinbase.IAccountsEndpoint.ListAccountsAsync(Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists current user’s accounts to which the authentication method has access to.
            </summary>
        </member>
        <member name="M:Coinbase.IAccountsEndpoint.GetAccountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show current user’s account. To access the primary account for a given currency, a currency string (BTC or ETH) can be used instead of the account id in the URL.
            </summary>
        </member>
        <member name="M:Coinbase.IAccountsEndpoint.SetAccountAsPrimaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Promote an account as primary account.
            </summary>
        </member>
        <member name="M:Coinbase.IAccountsEndpoint.UpdateAccountAsync(System.String,Coinbase.Models.UpdateAccount,System.Threading.CancellationToken)">
            <summary>
            Modifies user’s account.
            </summary>
        </member>
        <member name="M:Coinbase.IAccountsEndpoint.DeleteAccountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes user’s account. In order to remove an account it can’t be:
            * Primary account
            * Account with non-zero balance
            * Fiat account
            * Vault with a pending withdrawal
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAccountsEndpoint#ListAccountsAsync(Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists current user’s accounts to which the authentication method has access to.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAccountsEndpoint#GetAccountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show current user’s account. To access the primary account for a given currency, a currency string (BTC or ETH) can be used instead of the account id in the URL.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAccountsEndpoint#SetAccountAsPrimaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Promote an account as primary account.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAccountsEndpoint#UpdateAccountAsync(System.String,Coinbase.Models.UpdateAccount,System.Threading.CancellationToken)">
            <summary>
            Modifies user’s account.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAccountsEndpoint#DeleteAccountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes user’s account. In order to remove an account it can’t be:
            * Primary account
            * Account with non-zero balance
            * Fiat account
            * Vault with a pending withdrawal
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAddressesEndpoint#ListAddressesAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAddressesEndpoint#GetAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAddressesEndpoint#ListAddressTransactionsAsync(System.String,System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IAddressesEndpoint#CreateAddressAsync(System.String,Coinbase.Models.CreateAddress,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IBuysEndpoint#ListBuysAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists buys for an account.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IBuysEndpoint#GetBuyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an individual buy.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IBuysEndpoint#PlaceBuyOrderAsync(System.String,Coinbase.Models.PlaceBuy,System.Threading.CancellationToken)">
            <summary>
            Buys a user-defined amount of bitcoin, bitcoin cash, litecoin or ethereum.
            There are two ways to define buy amounts–you can use either the amount or the total parameter:
            1. When supplying amount, you’ll get the amount of bitcoin, bitcoin cash, litecoin or ethereum defined.With amount it’s recommended to use BTC or ETH as the currency value, but you can always specify a fiat currency and and the amount will be converted to BTC or ETH respectively.
            2. When supplying total, your payment method will be debited the total amount and you’ll get the amount in BTC or ETH after fees have been reduced from the total.With total it’s recommended to use the currency of the payment method as the currency parameter, but you can always specify a different currency and it will be converted.
            Given the price of digital currency depends on the time of the call and on the amount of purchase, it’s recommended to use the commit: false parameter to create an uncommitted buy to show the confirmation for the user or get the final quote, and commit that with a separate request.
            If you need to query the buy price without locking in the buy, you can use quote: true option.This returns an unsaved buy and unlike commit: false, this buy can’t be completed.This option is useful when you need to show the detailed buy price quote for the user when they are filling a form or similar situation.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IBuysEndpoint#CommitBuyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Completes a buy that is created in commit: false state.
            If the exchange rate has changed since the buy was created, this call will fail with the error “The exchange rate updated while you were waiting.The new total is shown below”.
            The buy’s total will also be updated.You can repeat the /commit call to accept the new values and start the buy at the new rates.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.#ctor(Coinbase.Config)">
            <summary>
            The main class for making Coinbase API calls.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.EnableFiddlerDebugProxy(System.String)">
            <summary>
            Enable HTTP debugging via Fiddler. Ensure Tools > Fiddler Options... > Connections is enabled and has a port configured.
            Then, call this method with the following URL format: http://localhost.:PORT where PORT is the port number Fiddler proxy
            is listening on. (Be sure to include the period after the localhost).
            </summary>
            <param name="proxyUrl">The full proxy URL Fiddler proxy is listening on. IE: http://localhost.:8888 - The period after localhost is important to include.</param>
        </member>
        <member name="M:Coinbase.CoinbaseClient.GetNextPageAsync``1(Coinbase.Models.PagedResponse{``0},System.Threading.CancellationToken)">
            <summary>
            Get the next page of data given the current paginated response.
            </summary>
            <param name="currentPage">The current paged response.</param>
            <returns>The next page of data.</returns>
        </member>
        <member name="M:Coinbase.CoinbaseClient.GetPageAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Internally used for getting a next or previous page.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Coinbase.CoinbaseClient.HoistResponse(System.Func{System.Net.Http.HttpResponseMessage}@)">
            <summary>
            Captures the low-level <seealso cref="T:System.Net.Http.HttpResponseMessage" /> from a
            underlying request. Useful in advanced scenarios where you
            want to check HTTP headers, HTTP status code or
            inspect the response body manually.
            </summary>
            <param name="responseGetter">A function that must be called to
            retrieve the <seealso cref="T:System.Net.Http.HttpResponseMessage"/>
            </param>
            <returns>Returns the <seealso cref="T:System.Net.Http.HttpResponseMessage"/> of the
            underlying HTTP request.</returns>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDataEndpoint#GetBuyPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the total price to buy one bitcoin or ether.
            Note that exchange rates fluctuates so the price is only correct for seconds at the time.This buy price includes standard Coinbase fee (1%) but excludes any other fees including bank fees.
            </summary>
            <param name="currencyPair">Currency pair such as BTC-USD, ETH-USD, etc.</param>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDataEndpoint#GetSellPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the total price to sell one bitcoin or ether.
            Note that exchange rates fluctuates so the price is only correct for seconds at the time.This sell price includes standard Coinbase fee (1%) but excludes any other fees including bank fees.
            </summary>
            <param name="currencyPair">Currency pair such as BTC-USD, ETH-USD, etc.</param>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDataEndpoint#GetSpotPriceAsync(System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get the current market price for bitcoin. This is usually somewhere in between the buy and sell price.
            Note that exchange rates fluctuates so the price is only correct for seconds at the time.
             </summary>
             <param name="currencyPair"></param>
             <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDataEndpoint#GetExchangeRatesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current exchange rates. Default base currency is USD but it can be defined as any supported currency. Returned rates will define the exchange rate for one unit of the base currency.
            </summary>
            <param name="currency">Base currency (default: USD)</param>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDataEndpoint#GetCurrenciesAsync(Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            List known currencies. Currency codes will conform to the ISO 4217 standard where possible. Currencies which have or had no representation in ISO 4217 may use a custom code (e.g. BTC).
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDataEndpoint#GetCurrentTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the API server time.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDepositsEndpoint#ListDepositsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDepositsEndpoint#GetDepositAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDepositsEndpoint#DepositFundsAsync(System.String,Coinbase.Models.DepositFunds,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IDepositsEndpoint#CommitDepositAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ISellsEndpoint#ListSellsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists sells for an account.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ISellsEndpoint#GetSellAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an individual sell.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ISellsEndpoint#PlaceSellOrderAsync(System.String,Coinbase.Models.PlaceSell,System.Threading.CancellationToken)">
             <summary>
             Sells a user-defined amount of bitcoin, bitcoin cash, litecoin or ethereum.
             There are two ways to define sell amounts–you can use either the amount or the total parameter:
             1.When supplying amount, you’ll get the amount of bitcoin, bitcoin cash, litecoin or ethereum defined. With amount it’s recommended to use BTC or ETH as the currency value, but you can always specify a fiat currency and the amount will be converted to BTC or ETH respectively.
             2.When supplying total, your payment method will be credited the total amount and you’ll get the amount in BTC or ETH after fees have been reduced from the subtotal. With total it’s recommended to use the currency of the payment method as the currency parameter, but you can always specify a different currency and it will be converted.
             Given the price of digital currency depends on the time of the call and amount of the sell, it’s recommended to use the commit: false parameter to create an uncommitted sell to get a quote and then to commit that with a separate request.
            If you need to query the sell price without locking in the sell, you can use quote: true option. This returns an unsaved sell and unlike commit: false, this sell can’t be completed. This option is useful when you need to show the detailed sell price quote for the user when they are filling a form or similar situation.
             </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ISellsEndpoint#CommitSellAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Completes a sell that is created in commit: false state.
            If the exchange rate has changed since the sell was created, this call will fail with the error “The exchange rate updated while you were waiting.The new total is shown below”.
            The sell’s total will also be updated.You can repeat the /commit call to accept the new values and commit the sell at the new rates.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#ListTransactionsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists account’s transactions.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#GetTransactionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show an individual transaction for an account. See transaction resource for more information.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#SendMoneyAsync(System.String,Coinbase.Models.CreateTransaction,System.Threading.CancellationToken)">
             <summary>
             Send funds to a bitcoin address, bitcoin cash address, litecoin address, ethereum address, or email address. No transaction fees are required for off blockchain bitcoin transactions.
             It’s recommended to always supply a unique idem field for each transaction.This prevents you from sending the same transaction twice if there has been an unexpected network outage or other issue.
             When used with OAuth2 authentication, this endpoint requires two factor authentication unless used with wallet:transactions:send:bypass-2fa scope.
            If the user is able to buy bitcoin, they can send funds from their fiat account using instant exchange feature.Buy fees will be included in the created transaction and the recipient will receive the user defined amount.
             </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#TransferMoneyAsync(System.String,Coinbase.Models.CreateTransfer,System.Threading.CancellationToken)">
            <summary>
            Transfer bitcoin, bitcoin cash, litecoin or ethereum between two of a user’s accounts. Following transfers are allowed:
            * wallet to wallet
            * wallet to vault
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#RequestMoneyAsync(System.String,Coinbase.Models.RequestMoney,System.Threading.CancellationToken)">
            <summary>
            Requests money from an email address.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#CompleteRequestMoneyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lets the recipient of a money request complete the request by sending money to the user who requested the money. This can only be completed by the user to whom the request was made, not the user who sent the request.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#ResendRequestMoneyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lets the user resend a money request. This will notify recipient with a new email.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#ITransactionsEndpoint#CancelRequestMoneyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lets a user cancel a money request. Money requests can be canceled by the sender or the recipient.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IUsersEndpoint#GetUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get any user’s public information with their ID.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IUsersEndpoint#GetCurrentUserAsync(System.Threading.CancellationToken)">
            <summary>
            Get current user’s public information. To get user’s email or private information, use permissions wallet:user:email and wallet:user:read. If current request has a wallet:transactions:send scope, then the response will contain a boolean sends_disabled field that indicates if the user’s send functionality has been disabled.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IUsersEndpoint#GetAuthInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get current user’s authorization information including granted scopes and send limits when using OAuth2 authentication.
            </summary>
        </member>
        <member name="M:Coinbase.CoinbaseClient.Coinbase#IUsersEndpoint#UpdateUserAsync(Coinbase.Models.UserUpdate,System.Threading.CancellationToken)">
            <summary>
            Modify current user and their preferences.
            </summary>
        </member>
        <member name="M:Coinbase.IAddressesEndpoint.ListAddressesAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists addresses for an account.
            </summary>
        </member>
        <member name="M:Coinbase.IAddressesEndpoint.GetAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show an individual address for an account. A regular bitcoin, bitcoin cash, litecoin or ethereum address can be used in place of address_id but the address has to be associated to the correct account.
            </summary>
        </member>
        <member name="M:Coinbase.IAddressesEndpoint.ListAddressTransactionsAsync(System.String,System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            List transactions that have been sent to a specific address. A regular bitcoin, bitcoin cash, litecoin or ethereum address can be used in place of address_id but the address has to be associated to the correct account.
            </summary>
        </member>
        <member name="M:Coinbase.IAddressesEndpoint.CreateAddressAsync(System.String,Coinbase.Models.CreateAddress,System.Threading.CancellationToken)">
             <summary>
             Creates a new address for an account. As all the arguments are optinal, it’s possible just to do a empty POST which will create a new address. This is handy if you need to create new receive addresses for an account on-demand.
            Addresses can be created for all account types.With fiat accounts, funds will be received with Instant Exchange.
             </summary>
        </member>
        <member name="M:Coinbase.IBuysEndpoint.ListBuysAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists buys for an account.
            </summary>
        </member>
        <member name="M:Coinbase.IBuysEndpoint.GetBuyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an individual buy.
            </summary>
        </member>
        <member name="M:Coinbase.IBuysEndpoint.PlaceBuyOrderAsync(System.String,Coinbase.Models.PlaceBuy,System.Threading.CancellationToken)">
            <summary>
            Buys a user-defined amount of bitcoin, bitcoin cash, litecoin or ethereum.
            There are two ways to define buy amounts–you can use either the amount or the total parameter:
            1. When supplying amount, you’ll get the amount of bitcoin, bitcoin cash, litecoin or ethereum defined.With amount it’s recommended to use BTC or ETH as the currency value, but you can always specify a fiat currency and and the amount will be converted to BTC or ETH respectively.
            2. When supplying total, your payment method will be debited the total amount and you’ll get the amount in BTC or ETH after fees have been reduced from the total.With total it’s recommended to use the currency of the payment method as the currency parameter, but you can always specify a different currency and it will be converted.
            Given the price of digital currency depends on the time of the call and on the amount of purchase, it’s recommended to use the commit: false parameter to create an uncommitted buy to show the confirmation for the user or get the final quote, and commit that with a separate request.
            If you need to query the buy price without locking in the buy, you can use quote: true option.This returns an unsaved buy and unlike commit: false, this buy can’t be completed.This option is useful when you need to show the detailed buy price quote for the user when they are filling a form or similar situation.
            </summary>
        </member>
        <member name="M:Coinbase.IBuysEndpoint.CommitBuyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Completes a buy that is created in commit: false state.
            If the exchange rate has changed since the buy was created, this call will fail with the error “The exchange rate updated while you were waiting.The new total is shown below”.
            The buy’s total will also be updated.You can repeat the /commit call to accept the new values and start the buy at the new rates.
            </summary>
        </member>
        <member name="M:Coinbase.IDataEndpoint.GetBuyPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the total price to buy one bitcoin or ether.
            Note that exchange rates fluctuates so the price is only correct for seconds at the time.This buy price includes standard Coinbase fee (1%) but excludes any other fees including bank fees.
            </summary>
            <param name="currencyPair">Currency pair such as BTC-USD, ETH-USD, etc.</param>
        </member>
        <member name="M:Coinbase.IDataEndpoint.GetSellPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the total price to sell one bitcoin or ether.
            Note that exchange rates fluctuates so the price is only correct for seconds at the time.This sell price includes standard Coinbase fee (1%) but excludes any other fees including bank fees.
            </summary>
            <param name="currencyPair">Currency pair such as BTC-USD, ETH-USD, etc.</param>
        </member>
        <member name="M:Coinbase.IDataEndpoint.GetSpotPriceAsync(System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get the current market price for bitcoin. This is usually somewhere in between the buy and sell price.
            Note that exchange rates fluctuates so the price is only correct for seconds at the time.
             </summary>
             <param name="currencyPair"></param>
             <param name="cancellationToken"></param>
        </member>
        <member name="M:Coinbase.IDataEndpoint.GetExchangeRatesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current exchange rates. Default base currency is USD but it can be defined as any supported currency. Returned rates will define the exchange rate for one unit of the base currency.
            </summary>
            <param name="currency">Base currency (default: USD)</param>
        </member>
        <member name="M:Coinbase.IDataEndpoint.GetCurrenciesAsync(Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            List known currencies. Currency codes will conform to the ISO 4217 standard where possible. Currencies which have or had no representation in ISO 4217 may use a custom code (e.g. BTC).
            </summary>
        </member>
        <member name="M:Coinbase.IDataEndpoint.GetCurrentTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the API server time.
            </summary>
        </member>
        <member name="M:Coinbase.IDepositsEndpoint.ListDepositsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists deposits for an account.
            </summary>
        </member>
        <member name="M:Coinbase.IDepositsEndpoint.GetDepositAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show an individual deposit.
            </summary>
        </member>
        <member name="M:Coinbase.IDepositsEndpoint.DepositFundsAsync(System.String,Coinbase.Models.DepositFunds,System.Threading.CancellationToken)">
            <summary>
            Deposits user-defined amount of funds to a fiat account.
            </summary>
        </member>
        <member name="M:Coinbase.IDepositsEndpoint.CommitDepositAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Completes a deposit that is created in commit: false state
            </summary>
        </member>
        <member name="M:Coinbase.INotificationsEndpoint.ListNotificationsAsync(Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists current user’s payment methods.
            </summary>
        </member>
        <member name="M:Coinbase.INotificationsEndpoint.GetNotificationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show current user’s payment method.
            </summary>
        </member>
        <member name="T:Coinbase.AuthorizeOptions">
            <summary>
            https://developers.coinbase.com/docs/wallet/coinbase-connect/integrating
            https://developers.coinbase.com/docs/wallet/coinbase-connect/reference
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.ClientId">
            <summary>
            Required The client ID you received after registering your application.
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.RedirectUri">
            <summary>
            Optional The URL in your app where users will be sent after authorization (see below). This value needs to be URL encoded. If left out, your application’s first redirect URI will be used by default.
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.State">
            <summary>
            Optional An unguessable random string. It is used to protect against cross-site request forgery attacks.
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.Scope">
            <summary>
            Optional Comma separated list of permissions (scopes) your application requests access to. Required scopes are listed under endpoints in the Full Scopes List
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.Layout">
            <summary>
            For logged out users, login view is shown by default. You can show the sign up page instead with value signup
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.Referral">
            <summary>
            Earn a referral bonus from new users who sign up via OAuth. Value needs to be set to developer’s referral ID (username). Read more.
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.Account">
            <summary>
            Change the account access the application will receive. Available values:
            * 'select' (default) Allow user to pick the wallet associated with the application
            * 'all' Application will get access to all of user’s wallets
            For backward compatibility all is used as default for applications created prior to this change
            </summary>
        </member>
        <member name="P:Coinbase.AuthorizeOptions.Name">
            <summary>
            Name for this session (not a name for your application.) This will appear in the user’s account settings underneath your application’s name. Use it to provide identifying information if your app is often authorized multiple times
            </summary>
        </member>
        <member name="M:Coinbase.OAuthHelper.GetAuthorizeUrl(Coinbase.AuthorizeOptions)">
            <summary>
            When redirecting a user to Coinbase to authorize access to your application,
            you’ll need to construct the authorization URL with the correct parameters
            and scopes. Here’s a list of parameters you should always specify:
            </summary>
        </member>
        <member name="M:Coinbase.OAuthHelper.GetAccessTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            After you have received the temporary code, you can exchange it for valid
            access and refresh tokens.
            </summary>
            <param name="code">Required Value from the GetAuthorizeUrl step.</param>
            <param name="clientId">Required The client ID you received after registering your application.</param>
            <param name="clientSecret">Required The client secret you received after registering your application.</param>
            <param name="redirectUri">Required Your application’s redirect URI</param>
        </member>
        <member name="M:Coinbase.OAuthHelper.RenewAccessAsync(System.String,System.String,System.String)">
            <summary>
            Coinbase uses an optional security feature of OAuth2 called refresh tokens.
            When you first authenticate, your app will be given an access_token and a
            refresh_token. The access token is used to authenticate all your requests,
            but expires in two hours. Once an access token has expired, you will need
            to use the refresh token to obtain a new access token and a new refresh token.
            The refresh token never expires but it can only be exchanged once for a new
            set of access and refresh tokens. If you try to make a call with an expired
            access token, a 401 response will be returned.
            </summary>
            <param name="refreshToken"></param>
            <param name="clientId"></param>
            <param name="clientSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Coinbase.OAuthHelper.RevokeTokenAsync(System.String,System.String)">
            <summary>
            Active access tokens can be revoked at any time. This request needs to be made authenticated like any other regular API request (either containing access_token parameter or Authentication header with bearer token) and 200 OK is returned for both successful and unsuccessful request. This can be useful, for example, when implementing log-out feature.
            </summary>
            <remarks>
            Access tokens can be revoked manually if you want to disconnect your application’s access to the user’s account. Revoking can also be used to implement a log-out feature. You’ll need to supply the current access token twice, once to revoke it, and another to authenticate the request (either containing access_token parameter or Authentication header with bearer token). 200 OK is returned for both successful and unsuccessful requests.
            </remarks>
            <param name="token">The access token to expire.</param>
            <param name="accessToken">The token used to make the authenticated request. This can be the same as the token in the first parameter.</param>
        </member>
        <member name="M:Coinbase.AutoRefreshTokenHelper.WithAutomaticOAuthTokenRefresh(Coinbase.CoinbaseClient,System.String,System.String,System.Func{Coinbase.Models.OAuthResponse,System.Threading.Tasks.Task})">
            <summary>
            Setup the CoinbaseClient to use automatic token refresh.
            </summary>
            <param name="clientId">The OAuth Application Client ID</param>
            <param name="clientSecret">The OAuth Application Secret</param>
            <param name="onRefresh">Callback function to invoke when the OAuth token is refreshed.</param>
        </member>
        <member name="M:Coinbase.IPaymentMethodsEndpoint.ListPaymentMethodsAsync(Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists current user’s payment methods.
            </summary>
        </member>
        <member name="M:Coinbase.IPaymentMethodsEndpoint.GetPaymentMethodAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show current user’s payment method.
            </summary>
        </member>
        <member name="M:Coinbase.ISellsEndpoint.ListSellsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists sells for an account.
            </summary>
        </member>
        <member name="M:Coinbase.ISellsEndpoint.GetSellAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an individual sell.
            </summary>
        </member>
        <member name="M:Coinbase.ISellsEndpoint.PlaceSellOrderAsync(System.String,Coinbase.Models.PlaceSell,System.Threading.CancellationToken)">
             <summary>
             Sells a user-defined amount of bitcoin, bitcoin cash, litecoin or ethereum.
             There are two ways to define sell amounts–you can use either the amount or the total parameter:
             1.When supplying amount, you’ll get the amount of bitcoin, bitcoin cash, litecoin or ethereum defined. With amount it’s recommended to use BTC or ETH as the currency value, but you can always specify a fiat currency and the amount will be converted to BTC or ETH respectively.
             2.When supplying total, your payment method will be credited the total amount and you’ll get the amount in BTC or ETH after fees have been reduced from the subtotal. With total it’s recommended to use the currency of the payment method as the currency parameter, but you can always specify a different currency and it will be converted.
             Given the price of digital currency depends on the time of the call and amount of the sell, it’s recommended to use the commit: false parameter to create an uncommitted sell to get a quote and then to commit that with a separate request.
            If you need to query the sell price without locking in the sell, you can use quote: true option. This returns an unsaved sell and unlike commit: false, this sell can’t be completed. This option is useful when you need to show the detailed sell price quote for the user when they are filling a form or similar situation.
             </summary>
        </member>
        <member name="M:Coinbase.ISellsEndpoint.CommitSellAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Completes a sell that is created in commit: false state.
            If the exchange rate has changed since the sell was created, this call will fail with the error “The exchange rate updated while you were waiting.The new total is shown below”.
            The sell’s total will also be updated.You can repeat the /commit call to accept the new values and commit the sell at the new rates.
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.ListTransactionsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists account’s transactions.
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.GetTransactionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show an individual transaction for an account. See transaction resource for more information.
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.SendMoneyAsync(System.String,Coinbase.Models.CreateTransaction,System.Threading.CancellationToken)">
             <summary>
             Send funds to a bitcoin address, bitcoin cash address, litecoin address, ethereum address, or email address. No transaction fees are required for off blockchain bitcoin transactions.
             It’s recommended to always supply a unique idem field for each transaction.This prevents you from sending the same transaction twice if there has been an unexpected network outage or other issue.
             When used with OAuth2 authentication, this endpoint requires two factor authentication unless used with wallet:transactions:send:bypass-2fa scope.
            If the user is able to buy bitcoin, they can send funds from their fiat account using instant exchange feature.Buy fees will be included in the created transaction and the recipient will receive the user defined amount.
             </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.TransferMoneyAsync(System.String,Coinbase.Models.CreateTransfer,System.Threading.CancellationToken)">
            <summary>
            Transfer bitcoin, bitcoin cash, litecoin or ethereum between two of a user’s accounts. Following transfers are allowed:
            * wallet to wallet
            * wallet to vault
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.RequestMoneyAsync(System.String,Coinbase.Models.RequestMoney,System.Threading.CancellationToken)">
            <summary>
            Requests money from an email address.
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.CompleteRequestMoneyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lets the recipient of a money request complete the request by sending money to the user who requested the money. This can only be completed by the user to whom the request was made, not the user who sent the request.
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.ResendRequestMoneyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lets the user resend a money request. This will notify recipient with a new email.
            </summary>
        </member>
        <member name="M:Coinbase.ITransactionsEndpoint.CancelRequestMoneyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lets a user cancel a money request. Money requests can be canceled by the sender or the recipient.
            </summary>
        </member>
        <member name="M:Coinbase.IUsersEndpoint.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get any user’s public information with their ID.
            </summary>
        </member>
        <member name="M:Coinbase.IUsersEndpoint.GetCurrentUserAsync(System.Threading.CancellationToken)">
            <summary>
            Get current user’s public information. To get user’s email or private information, use permissions wallet:user:email and wallet:user:read. If current request has a wallet:transactions:send scope, then the response will contain a boolean sends_disabled field that indicates if the user’s send functionality has been disabled.
            </summary>
        </member>
        <member name="M:Coinbase.IUsersEndpoint.GetAuthInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get current user’s authorization information including granted scopes and send limits when using OAuth2 authentication.
            </summary>
        </member>
        <member name="M:Coinbase.IUsersEndpoint.UpdateUserAsync(Coinbase.Models.UserUpdate,System.Threading.CancellationToken)">
            <summary>
            Modify current user and their preferences.
            </summary>
        </member>
        <member name="M:Coinbase.IWithdrawalsEndpoint.ListWithdrawalsAsync(System.String,Coinbase.PaginationOptions,System.Threading.CancellationToken)">
            <summary>
            Lists deposits for an account.
            </summary>
        </member>
        <member name="M:Coinbase.IWithdrawalsEndpoint.GetWithdrawalAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Show an individual deposit.
            </summary>
        </member>
        <member name="M:Coinbase.IWithdrawalsEndpoint.WithdrawalFundsAsync(System.String,Coinbase.Models.WithdrawalFunds,System.Threading.CancellationToken)">
            <summary>
            Deposits user-defined amount of funds to a fiat account.
            </summary>
        </member>
        <member name="M:Coinbase.IWithdrawalsEndpoint.CommitWithdrawalAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Completes a deposit that is created in commit: false state
            </summary>
        </member>
        <member name="P:Coinbase.Models.Json.ExtraJson">
            <summary>
            Extra data for/from the JSON serializer/deserializer to included with the object model.
            </summary>
        </member>
        <member name="P:Coinbase.Models.JsonResponse.Errors">
            <summary>
            All error messages include a type identifier and a human readable message.
            </summary>
        </member>
        <member name="P:Coinbase.Models.JsonResponse.Warnings">
            <summary>
            Responses can include a warnings parameter to notify the developer
            of best practices, implementation suggestions or deprecation warnings.
            While you don’t need show warnings to the user, they are usually
            something you need to act on.
            </summary>
        </member>
        <member name="M:Coinbase.Models.JsonResponse.HasError">
            <summary>
            Checks if the response has errors.
            </summary>
        </member>
        <member name="M:Coinbase.Models.JsonResponse.HasWarnings">
            <summary>
            Checks if the response has warnings.
            </summary>
        </member>
        <member name="M:Coinbase.Models.PagedResponse`1.HasNextPage">
            <summary>
            Indicates if a next page of data exists.
            </summary>
        </member>
        <member name="P:Coinbase.Models.Transaction.Status">
            <summary>
            Status can be comapred using <see cref="T:Coinbase.Models.TransactionStatus"/>
            </summary>
        </member>
        <member name="P:Coinbase.Models.Notification.Type">
            <summary>
            Types can be compared using <see cref="T:Coinbase.Models.NotificationEventNames"/>
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.Ping">
            <summary>
            Ping notification can be send at any time to verify that the notification URL is functioning
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletAddressNewPayment">
            <summary>
            New payment has been made to an address
            Permissions Required: wallet:addresses:read
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletBuysCreated">
            <summary>
            A buy has been created
            Permissions Required: wallet:buys:read or wallet:buys:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletBuysCompleted">
            <summary>
            A buy has been completed
            Permissions Required: wallet:buys:read or wallet:buys:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletBuysCanceled">
            <summary>
            A buy has been canceled
            Permissions Required: wallet:buys:read or wallet:buys:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletSellsCreated">
            <summary>
            A sell has been created
            Permissions Required: wallet:sells:read or wallet:sells:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletSellsCompleted">
            <summary>
            A sell has been completed
            Permissions Required: wallet:sells:read or wallet:sells:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletSellsCanceled">
            <summary>
            A sell has been canceled
            Permissions Required: wallet:sells:read or wallet:sells:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletDepositCreated">
            <summary>
            A deposit has been created
            Permissions Required: wallet:deposit:read or wallet:deposit:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletDepositCompleted">
            <summary>
            A deposit has been completed
            Permissions Required: wallet:deposit:read or wallet:deposit:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletDepositCanceled">
            <summary>
            A deposit has been canceled
            Permissions Required: wallet:deposit:read or wallet:deposit:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletWithdrawalCreated">
            <summary>
            A withdrawal has been created
            Permissions Required: wallet:withdrawal:read or wallet:withdrawal:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletWithdrawalCompleted">
            <summary>
            A withdrawal has been completed
            Permissions Required: wallet:withdrawal:read or wallet:withdrawal:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.NotificationEventNames.WalletWithdrawalCanceled">
            <summary>
            A withdrawal has been canceled
            Permissions Required: wallet:withdrawal:read or wallet:withdrawal:create
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.Pending">
            <summary>
            Pending transactions (e.g.a send or a buy)
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.Completed">
            <summary>
            Completed transactions(e.g.a send or a buy)
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.Failed">
            <summary>
            Failed transactions(e.g.failed buy)s
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.Expired">
            <summary>
            Conditional transaction expired due to external factors
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.Canceled">
            <summary>
            Transaction was canceled
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.WaitingForSignature">
            <summary>
            Vault withdrawal is waiting for approval
            </summary>
        </member>
        <member name="F:Coinbase.Models.TransactionStatus.WaitingForClearing">
            <summary>
            Vault withdrawal is waiting to be cleared
            </summary>
        </member>
        <member name="F:Coinbase.WebhookHelper.CoinbasePublicKeyModulus">
            <summary>
            Crypto strings of https://www.coinbase.com/coinbase.pub
            </summary>
        </member>
        <member name="M:Coinbase.WebhookHelper.IsValid(System.String,System.String)">
            <summary>
            Validate a callback from Coinbase.
            </summary>
            <param name="postBody">HTTP POST body</param>
            <param name="headerValue">The signature to be verified is present in the ‘CB-SIGNATURE’ HTTP Header encoded as base64</param>
        </member>
    </members>
</doc>
